"use strict";(self.webpackChunkrke_docs=self.webpackChunkrke_docs||[]).push([[5483],{8184:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=t(5893),a=t(1151);const s={title:"Custom Network Plug-in Example"},i=void 0,r={id:"config-options/add-ons/network-plugins/custom-network-plugin-example/custom-network-plugin-example",title:"Custom Network Plug-in Example",description:"The below example shows how to configure a custom network plug-in with an in-line add-on to the cluster.yml.",source:"@site/docs/config-options/add-ons/network-plugins/custom-network-plugin-example/custom-network-plugin-example.md",sourceDirName:"config-options/add-ons/network-plugins/custom-network-plugin-example",slug:"/config-options/add-ons/network-plugins/custom-network-plugin-example/",permalink:"/config-options/add-ons/network-plugins/custom-network-plugin-example/",draft:!1,unlisted:!1,editUrl:"https://github.com/rancher/rke1-docs/edit/main/docs/config-options/add-ons/network-plugins/custom-network-plugin-example/custom-network-plugin-example.md",tags:[],version:"current",lastUpdatedAt:1678917042,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{title:"Custom Network Plug-in Example"},sidebar:"mySidebar",previous:{title:"Network Plug-ins",permalink:"/config-options/add-ons/network-plugins/"},next:{title:"DNS providers",permalink:"/config-options/add-ons/dns/"}},l={},c=[];function u(n){const e={code:"code",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["The below example shows how to configure a custom network plug-in with an in-line add-on to the ",(0,o.jsx)(e.code,{children:"cluster.yml"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["First, to edit the network plug-ins, change the ",(0,o.jsx)(e.code,{children:"network"})," section of the YAML from:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'network:\n  options:\n    flannel_backend_type: "vxlan"\n  plugin: "canal"\n'})}),"\n",(0,o.jsx)(e.p,{children:"to:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"network:\n    plugin: none\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Then, in the ",(0,o.jsx)(e.code,{children:"addons"})," section of the ",(0,o.jsx)(e.code,{children:"cluster.yml"}),", you can add the add-on manifest of a cluster that has the network plugin-that you want. In the below example, we are replacing the Canal plugin with a Flannel plugin by adding the add-on manifest for the cluster through the ",(0,o.jsx)(e.code,{children:"addons"})," field:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'addons: |-\n    ---\n    kind: ClusterRoleBinding\n    apiVersion: rbac.authorization.k8s.io/v1\n    metadata:\n      name: flannel\n    roleRef:\n      apiGroup: rbac.authorization.k8s.io\n      kind: ClusterRole\n      name: flannel\n    subjects:\n    - kind: ServiceAccount\n      name: flannel\n      namespace: kube-system\n    ---\n    kind: ClusterRole\n    apiVersion: rbac.authorization.k8s.io/v1\n    metadata:\n      name: flannel\n    rules:\n      - apiGroups:\n          - ""\n        resources:\n          - pods\n        verbs:\n          - get\n      - apiGroups:\n          - ""\n        resources:\n          - nodes\n        verbs:\n          - list\n          - watch\n      - apiGroups:\n          - ""\n        resources:\n          - nodes/status\n        verbs:\n          - patch\n    ---\n    kind: ConfigMap\n    apiVersion: v1\n    metadata:\n      name: kube-flannel-cfg\n      namespace: "kube-system"\n      labels:\n        tier: node\n        app: flannel\n    data:\n      cni-conf.json: |\n        {\n          "name":"cbr0",\n          "cniVersion":"0.3.1",\n          "plugins":[\n            {\n              "type":"flannel",\n              "delegate":{\n                "forceAddress":true,\n                "isDefaultGateway":true\n              }\n            },\n            {\n              "type":"portmap",\n              "capabilities":{\n                "portMappings":true\n              }\n            }\n          ]\n        }\n      net-conf.json: |\n        {\n          "Network": "10.42.0.0/16",\n          "Backend": {\n            "Type": "vxlan"\n          }\n        }\n    ---\n    apiVersion: extensions/v1beta1\n    kind: DaemonSet\n    metadata:\n      name: kube-flannel\n      namespace: "kube-system"\n      labels:\n        tier: node\n        k8s-app: flannel\n    spec:\n      template:\n        metadata:\n          labels:\n            tier: node\n            k8s-app: flannel\n        spec:\n          affinity:\n            nodeAffinity:\n              requiredDuringSchedulingIgnoredDuringExecution:\n                nodeSelectorTerms:\n                  - matchExpressions:\n                    - key: beta.kubernetes.io/os\n                      operator: NotIn\n                      values:\n                        - windows\n          serviceAccountName: flannel\n          containers:\n          - name: kube-flannel\n            image: rancher/coreos-flannel:v0.10.0-rancher1\n            imagePullPolicy: IfNotPresent\n            resources:\n              limits:\n                cpu: 300m\n                memory: 500M\n              requests:\n                cpu: 150m\n                memory: 64M\n            command: ["/opt/bin/flanneld","--ip-masq","--kube-subnet-mgr"]\n            securityContext:\n              privileged: true\n            env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: POD_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            volumeMounts:\n            - name: run\n              mountPath: /run\n            - name: cni\n              mountPath: /etc/cni/net.d\n            - name: flannel-cfg\n              mountPath: /etc/kube-flannel/\n          - name: install-cni\n            image: rancher/flannel-cni:v0.3.0-rancher1\n            command: ["/install-cni.sh"]\n            env:\n            # The CNI network config to install on each node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: kube-flannel-cfg\n                  key: cni-conf.json\n            - name: CNI_CONF_NAME\n              value: "10-flannel.conflist"\n            volumeMounts:\n            - name: cni\n              mountPath: /host/etc/cni/net.d\n            - name: host-cni-bin\n              mountPath: /host/opt/cni/bin/\n          hostNetwork: true\n          tolerations:\n          - operator: Exists\n            effect: NoSchedule\n          - operator: Exists\n            effect: NoExecute\n          - key: node.kubernetes.io/not-ready\n            effect: NoSchedule\n            operator: Exists\n          volumes:\n            - name: run\n              hostPath:\n                path: /run\n            - name: cni\n              hostPath:\n                path: /etc/cni/net.d\n            - name: flannel-cfg\n              configMap:\n                name: kube-flannel-cfg\n            - name: host-cni-bin\n              hostPath:\n                path: /opt/cni/bin\n      updateStrategy:\n        rollingUpdate:\n          maxUnavailable: 20%\n        type: RollingUpdate\n    ---\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n      name: flannel\n      namespace: kube-system\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Result:"})," The cluster is up with the custom network plug-in."]})]})}function d(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>i});var o=t(7294);const a={},s=o.createContext(a);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);